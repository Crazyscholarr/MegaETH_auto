import asyncio
import random
from loguru import logger


import src.utils
from src.utils.output import show_dev_info, show_logo
from src.utils.proxy_parser import Proxy
import src.model
from src.utils.statistics import print_wallets_stats
from src.utils.check_github_version import check_version
from src.utils.logs import ProgressTracker, create_progress_tracker
from src.utils.config_browser import run

async def start():
    async def launch_wrapper(index, proxy, private_key):
        async with semaphore:
            await account_flow(
                index,
                proxy,
                private_key,
                config,
                lock,
                progress_tracker,
            )

    try:
        await check_version("0xStarLabs", "StarLabs-MegaETH")
    except Exception as e:
        import traceback

        traceback.print_exc()
        logger.error(f"Kh√¥ng th·ªÉ ki·ªÉm tra phi√™n b·∫£n: {e}")
        logger.info("Ti·∫øp t·ª•c v·ªõi phi√™n b·∫£n hi·ªán t·∫°i\n")

    print("\nC√°c t√πy ch·ªçn c√≥ s·∫µn:\n")
    print("[1] ‚≠êÔ∏è B·∫Øt ƒë·∫ßu farming")
    print("[2] üîß Ch·ªânh s·ª≠a c·∫•u h√¨nh")
    print("[3] üíæ H√†nh ƒë·ªông c∆° s·ªü d·ªØ li·ªáu")
    print("[4] üëã Tho√°t")
    print()

    try:
        choice = input("Nh·∫≠p t√πy ch·ªçn (1-4): ").strip()
    except Exception as e:
        logger.error(f"L·ªói nh·∫≠p li·ªáu: {e}")
        return

    if choice == "4" or not choice:
        return
    elif choice == "2":
        run()
        return
    elif choice == "1":
        pass
    elif choice == "3":
        from src.model.database.db_manager import show_database_menu

        await show_database_menu()
        await start()
    else:
        logger.error(f"T√πy ch·ªçn kh√¥ng h·ª£p l·ªá: {choice}")
        return

    config = src.utils.get_config()

    # T·∫£i proxy b·∫±ng c√°ch s·ª≠ d·ª•ng proxy parser
    try:
        proxy_objects = Proxy.from_file("data/proxies.txt")
        proxies = [proxy.get_default_format() for proxy in proxy_objects]
        if len(proxies) == 0:
            logger.error("Kh√¥ng t√¨m th·∫•y proxy trong data/proxies.txt")
            return
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ t·∫£i proxy: {e}")
        return

    private_keys = src.utils.read_private_keys("data/private_keys.txt")

    # X√°c ƒë·ªãnh ph·∫°m vi t√†i kho·∫£n
    start_index = config.SETTINGS.ACCOUNTS_RANGE[0]
    end_index = config.SETTINGS.ACCOUNTS_RANGE[1]

    # N·∫øu c·∫£ hai ƒë·ªÅu l√† 0, ki·ªÉm tra EXACT_ACCOUNTS_TO_USE
    if start_index == 0 and end_index == 0:
        if config.SETTINGS.EXACT_ACCOUNTS_TO_USE:
            # Chuy·ªÉn ƒë·ªïi s·ªë t√†i kho·∫£n th√†nh ch·ªâ s·ªë (s·ªë - 1)
            selected_indices = [i - 1 for i in config.SETTINGS.EXACT_ACCOUNTS_TO_USE]
            accounts_to_process = [private_keys[i] for i in selected_indices]
            logger.info(
                f"S·ª≠ d·ª•ng c√°c t√†i kho·∫£n c·ª• th·ªÉ: {config.SETTINGS.EXACT_ACCOUNTS_TO_USE}"
            )

            # ƒê·ªÉ t∆∞∆°ng th√≠ch v·ªõi ph·∫ßn c√≤n l·∫°i c·ªßa m√£
            start_index = min(config.SETTINGS.EXACT_ACCOUNTS_TO_USE)
            end_index = max(config.SETTINGS.EXACT_ACCOUNTS_TO_USE)
        else:
            # N·∫øu danh s√°ch r·ªóng, l·∫•y t·∫•t c·∫£ t√†i kho·∫£n nh∆∞ tr∆∞·ªõc
            accounts_to_process = private_keys
            start_index = 1
            end_index = len(private_keys)
    else:
        # Python slice kh√¥ng bao g·ªìm ph·∫ßn t·ª≠ cu·ªëi, v√¨ v·∫≠y +1
        accounts_to_process = private_keys[start_index - 1 : end_index]

    threads = config.SETTINGS.THREADS

    # Chu·∫©n b·ªã proxy cho c√°c t√†i kho·∫£n ƒë√£ ch·ªçn
    cycled_proxies = [
        proxies[i % len(proxies)] for i in range(len(accounts_to_process))
    ]

    # T·∫°o danh s√°ch ch·ªâ s·ªë
    indices = list(range(len(accounts_to_process)))

    # X√°o tr·ªôn ch·ªâ s·ªë ch·ªâ khi SHUFFLE_WALLETS ƒë∆∞·ª£c b·∫≠t
    if config.SETTINGS.SHUFFLE_WALLETS:
        random.shuffle(indices)
        shuffle_status = "ng·∫´u nhi√™n"
    else:
        shuffle_status = "tu·∫ßn t·ª±"

    # T·∫°o chu·ªói v·ªõi th·ª© t·ª± t√†i kho·∫£n
    if config.SETTINGS.EXACT_ACCOUNTS_TO_USE:
        # T·∫°o danh s√°ch s·ªë t√†i kho·∫£n theo th·ª© t·ª± c·∫ßn thi·∫øt
        ordered_accounts = [config.SETTINGS.EXACT_ACCOUNTS_TO_USE[i] for i in indices]
        account_order = " ".join(map(str, ordered_accounts))
        logger.info(f"B·∫Øt ƒë·∫ßu v·ªõi c√°c t√†i kho·∫£n c·ª• th·ªÉ theo th·ª© t·ª± {shuffle_status}...")
    else:
        account_order = " ".join(str(start_index + idx) for idx in indices)
        logger.info(
            f"B·∫Øt ƒë·∫ßu v·ªõi c√°c t√†i kho·∫£n t·ª´ {start_index} ƒë·∫øn {end_index} theo th·ª© t·ª± {shuffle_status}..."
        )
    logger.info(f"Th·ª© t·ª± t√†i kho·∫£n: {account_order}")

    lock = asyncio.Lock()
    semaphore = asyncio.Semaphore(value=threads)
    tasks = []

    # Th√™m tr∆∞·ªõc khi t·∫°o t√°c v·ª•
    progress_tracker = await create_progress_tracker(
        total=len(accounts_to_process), description="T√†i kho·∫£n ƒë√£ ho√†n th√†nh"
    )

    # S·ª≠ d·ª•ng ch·ªâ s·ªë ƒë·ªÉ t·∫°o t√°c v·ª•
    for idx in indices:
        actual_index = (
            config.SETTINGS.EXACT_ACCOUNTS_TO_USE[idx]
            if config.SETTINGS.EXACT_ACCOUNTS_TO_USE
            else start_index + idx
        )
        tasks.append(
            asyncio.create_task(
                launch_wrapper(
                    actual_index,
                    cycled_proxies[idx],
                    accounts_to_process[idx],
                )
            )
        )

    await asyncio.gather(*tasks)

    logger.success("ƒê√£ l∆∞u t√†i kho·∫£n v√† kh√≥a ri√™ng v√†o t·ªáp.")

    print_wallets_stats(config)

    input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")


async def account_flow(
    account_index: int,
    proxy: str,
    private_key: str,
    config: src.utils.config.Config,
    lock: asyncio.Lock,
    progress_tracker: ProgressTracker,
):
    try:
        pause = random.randint(
            config.SETTINGS.RANDOM_INITIALIZATION_PAUSE[0],
            config.SETTINGS.RANDOM_INITIALIZATION_PAUSE[1],
        )
        logger.info(f"[{account_index}] Ngh·ªâ {pause} gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu...")
        await asyncio.sleep(pause)

        instance = src.model.Start(account_index, proxy, private_key, config)

        result = await wrapper(instance.initialize, config)
        if not result:
            raise Exception("Kh√¥ng th·ªÉ kh·ªüi t·∫°o")

        result = await wrapper(instance.flow, config)
        if not result:
            report = True

        pause = random.randint(
            config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACCOUNTS[0],
            config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACCOUNTS[1],
        )
        logger.info(f"Ngh·ªâ {pause} gi√¢y tr∆∞·ªõc t√†i kho·∫£n ti·∫øp theo...")
        await asyncio.sleep(pause)

        # C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
        await progress_tracker.increment(1)

    except Exception as err:
        logger.error(f"{account_index} | Quy tr√¨nh t√†i kho·∫£n th·∫•t b·∫°i: {err}")
        # C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô ngay c·∫£ khi c√≥ l·ªói
        await progress_tracker.increment(1)


async def wrapper(function, config: src.utils.config.Config, *args, **kwargs):
    attempts = config.SETTINGS.ATTEMPTS
    attempts = 1
    for attempt in range(attempts):
        result = await function(*args, **kwargs)
        if isinstance(result, tuple) and result and isinstance(result[0], bool):
            if result[0]:
                return result
        elif isinstance(result, bool):
            if result:
                return True

        if attempt < attempts - 1:  # Kh√¥ng ngh·ªâ sau l·∫ßn th·ª≠ cu·ªëi
            pause = random.randint(
                config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS[0],
                config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS[1],
            )
            logger.info(
                f"Ngh·ªâ {pause} gi√¢y tr∆∞·ªõc l·∫ßn th·ª≠ ti·∫øp theo {attempt+1}/{config.SETTINGS.ATTEMPTS}..."
            )
            await asyncio.sleep(pause)

    return result


def task_exists_in_config(task_name: str, tasks_list: list) -> bool:
    """Ki·ªÉm tra ƒë·ªá quy s·ª± t·ªìn t·∫°i c·ªßa m·ªôt nhi·ªám v·ª• trong danh s√°ch nhi·ªám v·ª•, bao g·ªìm c√°c danh s√°ch l·ªìng nhau"""
    for task in tasks_list:
        if isinstance(task, list):
            if task_exists_in_config(task_name, task):
                return True
        elif task == task_name:
            return True
    return Falseimport 
import asyncio
import random
from loguru import logger


import src.utils
from src.utils.output import show_dev_info, show_logo
from src.utils.proxy_parser import Proxy
import src.model
from src.utils.statistics import print_wallets_stats
from src.utils.check_github_version import check_version
from src.utils.logs import ProgressTracker, create_progress_tracker
from src.utils.config_browser import run

async def start():
    async def launch_wrapper(index, proxy, private_key):
        async with semaphore:
            await account_flow(
                index,
                proxy,
                private_key,
                config,
                lock,
                progress_tracker,
            )

    try:
        await check_version("Crazyscholarr", "MegaETH_auto")
    except Exception as e:
        import traceback

        traceback.print_exc()
        logger.error(f"Kh√¥ng th·ªÉ ki·ªÉm tra phi√™n b·∫£n: {e}")
        logger.info("Ti·∫øp t·ª•c v·ªõi phi√™n b·∫£n hi·ªán t·∫°i\n")

    print("\nC√°c t√πy ch·ªçn c√≥ s·∫µn:\n")
    print("[1] ‚≠êÔ∏è B·∫Øt ƒë·∫ßu farming")
    print("[2] üîß Ch·ªânh s·ª≠a c·∫•u h√¨nh")
    print("[3] üíæ H√†nh ƒë·ªông c∆° s·ªü d·ªØ li·ªáu")
    print("[4] üëã Tho√°t")
    print()

    try:
        choice = input("Nh·∫≠p t√πy ch·ªçn (1-4): ").strip()
    except Exception as e:
        logger.error(f"L·ªói nh·∫≠p li·ªáu: {e}")
        return

    if choice == "4" or not choice:
        return
    elif choice == "2":
        run()
        return
    elif choice == "1":
        pass
    elif choice == "3":
        from src.model.database.db_manager import show_database_menu

        await show_database_menu()
        await start()
    else:
        logger.error(f"T√πy ch·ªçn kh√¥ng h·ª£p l·ªá: {choice}")
        return

    config = src.utils.get_config()

    # T·∫£i proxy b·∫±ng c√°ch s·ª≠ d·ª•ng proxy parser
    try:
        proxy_objects = Proxy.from_file("data/proxies.txt")
        proxies = [proxy.get_default_format() for proxy in proxy_objects]
        if len(proxies) == 0:
            logger.error("Kh√¥ng t√¨m th·∫•y proxy trong data/proxies.txt")
            return
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ t·∫£i proxy: {e}")
        return

    private_keys = src.utils.read_private_keys("data/private_keys.txt")

    # X√°c ƒë·ªãnh ph·∫°m vi t√†i kho·∫£n
    start_index = config.SETTINGS.ACCOUNTS_RANGE[0]
    end_index = config.SETTINGS.ACCOUNTS_RANGE[1]

    # N·∫øu c·∫£ hai ƒë·ªÅu l√† 0, ki·ªÉm tra EXACT_ACCOUNTS_TO_USE
    if start_index == 0 and end_index == 0:
        if config.SETTINGS.EXACT_ACCOUNTS_TO_USE:
            # Chuy·ªÉn ƒë·ªïi s·ªë t√†i kho·∫£n th√†nh ch·ªâ s·ªë (s·ªë - 1)
            selected_indices = [i - 1 for i in config.SETTINGS.EXACT_ACCOUNTS_TO_USE]
            accounts_to_process = [private_keys[i] for i in selected_indices]
            logger.info(
                f"S·ª≠ d·ª•ng c√°c t√†i kho·∫£n c·ª• th·ªÉ: {config.SETTINGS.EXACT_ACCOUNTS_TO_USE}"
            )

            # ƒê·ªÉ t∆∞∆°ng th√≠ch v·ªõi ph·∫ßn c√≤n l·∫°i c·ªßa m√£
            start_index = min(config.SETTINGS.EXACT_ACCOUNTS_TO_USE)
            end_index = max(config.SETTINGS.EXACT_ACCOUNTS_TO_USE)
        else:
            # N·∫øu danh s√°ch r·ªóng, l·∫•y t·∫•t c·∫£ t√†i kho·∫£n nh∆∞ tr∆∞·ªõc
            accounts_to_process = private_keys
            start_index = 1
            end_index = len(private_keys)
    else:
        # Python slice kh√¥ng bao g·ªìm ph·∫ßn t·ª≠ cu·ªëi, v√¨ v·∫≠y +1
        accounts_to_process = private_keys[start_index - 1 : end_index]

    threads = config.SETTINGS.THREADS

    # Chu·∫©n b·ªã proxy cho c√°c t√†i kho·∫£n ƒë√£ ch·ªçn
    cycled_proxies = [
        proxies[i % len(proxies)] for i in range(len(accounts_to_process))
    ]

    # T·∫°o danh s√°ch ch·ªâ s·ªë
    indices = list(range(len(accounts_to_process)))

    # X√°o tr·ªôn ch·ªâ s·ªë ch·ªâ khi SHUFFLE_WALLETS ƒë∆∞·ª£c b·∫≠t
    if config.SETTINGS.SHUFFLE_WALLETS:
        random.shuffle(indices)
        shuffle_status = "ng·∫´u nhi√™n"
    else:
        shuffle_status = "tu·∫ßn t·ª±"

    # T·∫°o chu·ªói v·ªõi th·ª© t·ª± t√†i kho·∫£n
    if config.SETTINGS.EXACT_ACCOUNTS_TO_USE:
        # T·∫°o danh s√°ch s·ªë t√†i kho·∫£n theo th·ª© t·ª± c·∫ßn thi·∫øt
        ordered_accounts = [config.SETTINGS.EXACT_ACCOUNTS_TO_USE[i] for i in indices]
        account_order = " ".join(map(str, ordered_accounts))
        logger.info(f"B·∫Øt ƒë·∫ßu v·ªõi c√°c t√†i kho·∫£n c·ª• th·ªÉ theo th·ª© t·ª± {shuffle_status}...")
    else:
        account_order = " ".join(str(start_index + idx) for idx in indices)
        logger.info(
            f"B·∫Øt ƒë·∫ßu v·ªõi c√°c t√†i kho·∫£n t·ª´ {start_index} ƒë·∫øn {end_index} theo th·ª© t·ª± {shuffle_status}..."
        )
    logger.info(f"Th·ª© t·ª± t√†i kho·∫£n: {account_order}")

    lock = asyncio.Lock()
    semaphore = asyncio.Semaphore(value=threads)
    tasks = []

    # Th√™m tr∆∞·ªõc khi t·∫°o t√°c v·ª•
    progress_tracker = await create_progress_tracker(
        total=len(accounts_to_process), description="T√†i kho·∫£n ƒë√£ ho√†n th√†nh"
    )

    # S·ª≠ d·ª•ng ch·ªâ s·ªë ƒë·ªÉ t·∫°o t√°c v·ª•
    for idx in indices:
        actual_index = (
            config.SETTINGS.EXACT_ACCOUNTS_TO_USE[idx]
            if config.SETTINGS.EXACT_ACCOUNTS_TO_USE
            else start_index + idx
        )
        tasks.append(
            asyncio.create_task(
                launch_wrapper(
                    actual_index,
                    cycled_proxies[idx],
                    accounts_to_process[idx],
                )
            )
        )

    await asyncio.gather(*tasks)

    logger.success("ƒê√£ l∆∞u t√†i kho·∫£n v√† kh√≥a ri√™ng v√†o t·ªáp.")

    print_wallets_stats(config)

    input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")


async def account_flow(
    account_index: int,
    proxy: str,
    private_key: str,
    config: src.utils.config.Config,
    lock: asyncio.Lock,
    progress_tracker: ProgressTracker,
):
    try:
        pause = random.randint(
            config.SETTINGS.RANDOM_INITIALIZATION_PAUSE[0],
            config.SETTINGS.RANDOM_INITIALIZATION_PAUSE[1],
        )
        logger.info(f"[{account_index}] Ngh·ªâ {pause} gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu...")
        await asyncio.sleep(pause)

        instance = src.model.Start(account_index, proxy, private_key, config)

        result = await wrapper(instance.initialize, config)
        if not result:
            raise Exception("Kh√¥ng th·ªÉ kh·ªüi t·∫°o")

        result = await wrapper(instance.flow, config)
        if not result:
            report = True

        pause = random.randint(
            config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACCOUNTS[0],
            config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACCOUNTS[1],
        )
        logger.info(f"Ngh·ªâ {pause} gi√¢y tr∆∞·ªõc t√†i kho·∫£n ti·∫øp theo...")
        await asyncio.sleep(pause)

        # C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
        await progress_tracker.increment(1)

    except Exception as err:
        logger.error(f"{account_index} | Quy tr√¨nh t√†i kho·∫£n th·∫•t b·∫°i: {err}")
        # C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô ngay c·∫£ khi c√≥ l·ªói
        await progress_tracker.increment(1)


async def wrapper(function, config: src.utils.config.Config, *args, **kwargs):
    attempts = config.SETTINGS.ATTEMPTS
    attempts = 1
    for attempt in range(attempts):
        result = await function(*args, **kwargs)
        if isinstance(result, tuple) and result and isinstance(result[0], bool):
            if result[0]:
                return result
        elif isinstance(result, bool):
            if result:
                return True

        if attempt < attempts - 1:  # Kh√¥ng ngh·ªâ sau l·∫ßn th·ª≠ cu·ªëi
            pause = random.randint(
                config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS[0],
                config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS[1],
            )
            logger.info(
                f"Ngh·ªâ {pause} gi√¢y tr∆∞·ªõc l·∫ßn th·ª≠ ti·∫øp theo {attempt+1}/{config.SETTINGS.ATTEMPTS}..."
            )
            await asyncio.sleep(pause)

    return result


def task_exists_in_config(task_name: str, tasks_list: list) -> bool:
    """Ki·ªÉm tra ƒë·ªá quy s·ª± t·ªìn t·∫°i c·ªßa m·ªôt nhi·ªám v·ª• trong danh s√°ch nhi·ªám v·ª•, bao g·ªìm c√°c danh s√°ch l·ªìng nhau"""
    for task in tasks_list:
        if isinstance(task, list):
            if task_exists_in_config(task_name, task):
                return True
        elif task == task_name:
            return True
    return False